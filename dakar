#!/usr/bin/env php
<?php

require_once("Framework/ProjectStructure.php");
require_once("Framework/parser.php");
require_once("Framework/DKTemplateEngine/DKTemplateEngine.php");
// Defining PHP_EOL in case it isnt.
if (!defined('PHP_EOL')) {
    if (strtoupper(substr(PHP_OS,0,3) == 'WIN')) {
      define('PHP_EOL',"\r\n");
    } elseif (strtoupper(substr(PHP_OS,0,3) == 'MAC')) {
      define('PHP_EOL',"\r");
    } elseif (strtoupper(substr(PHP_OS,0,3) == 'DAR')) {
      define('PHP_EOL',"\n");
    } else {
      define('PHP_EOL',"\n");
    }
  }

if(!$argv[1]){
  echo("List of commands:${PHP_EOL}\n
  new => Creates a new project takes the name as a params ${PHP_EOL}\n
  build => Translate the dakar files to php ${PHP_EOL}\n
  -c => compile [file] ${PHP_EOL}\n
  help => Display this message ${PHP_EOL}\n
  -h => display this help message ${PHP_EOL}\n
  -v => display the version ${PHP_EOL}");

}

// handling command line option for the dakar command
switch($argv[1]){
    case "help":
        echo("List of commands:${PHP_EOL}\n
new => Creates a new project takes the name as a params ${PHP_EOL}\n
build => Translate the dakar files to php ${PHP_EOL}\n
-c => compile [file] ${PHP_EOL}\n
help => Display this message ${PHP_EOL}\n
-h => display this help message ${PHP_EOL}\n
-v => display the version ${PHP_EOL}");
    break ; 
    case "new":
        if($argv[2]){
            (new ProjectStructure($argv[2])) ;
        } else {
            echo "No arguments were supplied to the 'new' command";
        }
    
    break ; 

    case "build":
       

$json_file = @file_get_contents(getcwd() . "/dakar.json") or die("Build can only be used inside a dakar project ");

$json_structure = json_decode($json_file, true);
$dirname = $json_structure['project']['name'];
//Get the Iteratrable of our project structure .
$dirs = new RecursiveIteratorIterator(new RecursiveDirectoryIterator("App",RecursiveDirectoryIterator::SKIP_DOTS));

// For every Path in The Recursive search.
foreach($dirs as $d){
	// For every path remove the Projectname prefix and the App directory.
	$fileNamePath = explode("/",$d);
	$fileNamePath = array_slice($fileNamePath,1);
	$filesToCreate = implode("/",$fileNamePath);
	
	// Array to filter directory paths.
	$directory_path = [];
	$filesToCreate = explode("\n",$filesToCreate);
	
	// For every path
	foreach($filesToCreate as $f){
		// For every part of the path
		foreach(explode("/", $f) as $pathElement){
			
			// update the path 
			array_push($directory_path,$pathElement); 
			
			$currentIterationFile = implode("/",$directory_path);
            
			foreach(explode("\n",$currentIterationFile) as $currentFileDirectory){
             
				if(explode("/",$currentFileDirectory)[0] == ".php" ){ continue; }
                
                if(!is_dir("App/.php/$currentFileDirectory")){
                   
					if(@explode(".",$currentFileDirectory)[1] == "dk" || 
					   @explode(".",$currentFileDirectory)[1] == "tdk") {
						
						// If they are dk files 
                        if(@explode(".",$currentFileDirectory)[1] == "dk") {
                            $destination = @explode("/",$currentFileDirectory);
                            array_pop($destination);
                            $destination = implode("/",$destination);
							Parser::parse(getcwd() . "/App/$currentFileDirectory", getcwd() ."/App/.php/$destination");
                        } 
				}else if(explode(".",$currentFileDirectory)[1] == "tdk") {
          $destination = @explode("/",$currentFileDirectory);
          array_pop($destination);
          $destination = implode("/",$destination);
          DKTemplateEngine::compile(getcwd() . "/App/$currentFileDirectory", getcwd() ."/App/.php/$destination");
        }
				else {
					mkdir("App/.php/$currentFileDirectory");
				}
			}
		}
			
		}
	
	}

}
    echo "\n$dirname : Build Succeded !\n";
        
    break ; 
    
    case "-c":
        if($argv[2]){
           if(!$argv[3]){
                $argv[3] = ".";
           }
           Parser::parse($argv[2],$argv[3]);

        } else {
            echo "file name missing";
        }
    
    break ; 

    default:
       exit("\033[1;31m - Unvalid command use the \"help\" command to see options");
}
?>
